name: CI

on: push

jobs:
 test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Set Up Python
      uses: actions/setup-python@v2

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ./src/requirements.txt

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Start Services with Docker Compose
      run: docker-compose up -d

    - name: Add .env file
      run: |
        echo "${{ secrets.ENV_FILE }}" > $GITHUB_WORKSPACE/.env

    - name: Wait
      run: sleep 20

    - name: Run Pytest
      run: pytest

    - name: Remove .env file
      run: rm $GITHUB_WORKSPACE/.env

    - name: Shutdown Docker Compose
      run: docker-compose down

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.LIOR_A_K }}
        aws-secret-access-key: ${{ secrets.LIOR_S_A_K }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: project
        IMAGE_APP_TAG: app_project
        IMAGE_DB_TAG: db_project
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_DB_TAG ./db/
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_DB_TAG
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_APP_TAG ./src/
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_APP_TAG

    - name: Upload artifact for CD
      uses: actions/upload-artifact@v2
      with:
        name: trigger-cd
        path: |
          ./src/
          ./db/


